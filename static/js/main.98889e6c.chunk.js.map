{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/routes.js","components/Navigation/Navigation.js","components/UserMenu/UserMenu.js","components/AuthNav/AuthNav.js","components/AppBar/AppBar.js","components/Container/Container.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","index.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","items","createReducer","state","payload","map","contact","name","includes","alert","filter","id","loading","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contacts","contactsReducer","reduxStore","persistor","persistStore","routes","HomeView","RegisterView","LoginView","ContactsView","Navigation","isLoggedIn","useSelector","authSelectors","getIsAuthenticated","className","activeClassName","to","exact","UserMenu","dispatch","useDispatch","email","getUsermail","onLogout","useCallback","authOperations","logOut","type","onClick","AuthNav","AppBar","Container","children","PrivateRoute","isAuthenticated","redirectTo","routeProps","PublicRoute","restricted","lazy","App","useEffect","getCurrentUser","fallback","path","ReactDOM","render","StrictMode","document","getElementById","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","authActions","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","user","_","token","setError","axios","defaults","baseURL","headers","common","Authorization","register","credentials","a","post","response","data","message","logIn","getState","persistedToken","get"],"mappings":"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","file":"static/js/main.98889e6c.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n\r\nexport const filterContacts = createAction('contacts/Filter');\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    filterContacts\r\n } from './contacts-actions'\r\n\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]: (state, { payload }) => payload,\r\n    \r\n    [addContactSuccess]: (state, { payload }) => state.map(contact => contact.name).includes(payload.name)\r\n    ? alert(`${payload.name} is already in contacts.`)\r\n    : [payload, ...state],\r\n  \r\n    \r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(contact => contact.id !== payload),\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [filterContacts]: (state, { payload }) => payload,\r\n})\r\n\r\nconst error = createReducer(null, {})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error,\r\n})","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\nimport { authReducer } from './auth';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}),\r\n\r\n    logger\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),       \r\n    contacts: contactsReducer,\r\n  },\r\n    \r\n  middleware,\r\n});\r\n\r\nconst persistor = persistStore(store)\r\n\r\nconst reduxStore = { store, persistor };\r\n\r\nexport default reduxStore","const routes =  {\r\n    HomeView: '/',\r\n    RegisterView: '/register',\r\n    LoginView: '/login',\r\n    ContactsView: '/contacts'\r\n}\r\n\r\nexport default routes","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from '../routes';\r\n// import { connect } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelectors } from '../../redux/auth';\r\n\r\nimport './Navigation.css';\r\n\r\nexport default function Navigation() {\r\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n    <nav>\r\n      <NavLink\r\n        className=\"navigation__link\"\r\n        activeClassName=\"navigation__activeLink\"\r\n        to={routes.HomeView}\r\n        exact\r\n      >\r\n        HOME\r\n      </NavLink>\r\n\r\n      {isLoggedIn && (\r\n        <NavLink\r\n          className=\"navigation__link\"\r\n          activeClassName=\"navigation__activeLink\"\r\n          to={routes.ContactsView}\r\n          exact\r\n        >\r\n          CONTACTS\r\n        </NavLink>\r\n      )}\r\n    </nav>\r\n  );\r\n}\r\n\r\n// const Navigation = ({ isAuthenticated }) => (\r\n//   <nav>\r\n//     <NavLink\r\n//       className=\"navigation__link\"\r\n//       activeClassName=\"navigation__activeLink\"\r\n//       to={routes.HomeView}\r\n//       exact\r\n//     >\r\n//       HOME\r\n//     </NavLink>\r\n\r\n//     {isAuthenticated && (\r\n//       <NavLink\r\n//         className=\"navigation__link\"\r\n//         activeClassName=\"navigation__activeLink\"\r\n//         to={routes.ContactsView}\r\n//         exact\r\n//       >\r\n//         CONTACTS\r\n//       </NavLink>\r\n//     )}\r\n//   </nav>\r\n// );\r\n\r\n// const mapStateToProps = state => ({\r\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n// });\r\n\r\n// export default connect(mapStateToProps)(Navigation);\r\n","import React, { useCallback } from 'react';\r\n// import { connect } from 'react-redux';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../../redux/auth';\r\n\r\nimport './UserMenu.css';\r\n\r\nexport default function UserMenu() {\r\n  const dispatch = useDispatch();\r\n\r\n  const email = useSelector(authSelectors.getUsermail);\r\n\r\n  const onLogout = useCallback(\r\n    () => dispatch(authOperations.logOut()),\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    <div className=\"userMenu__container\">\r\n      <p className=\"userMenu__email\">{email}</p>\r\n      <button className=\"userMenu__button\" type=\"button\" onClick={onLogout}>\r\n        Logout\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const UserMenu = ({ email, onLogout }) => (\r\n//   <div className=\"userMenu__container\">\r\n//     <p className=\"userMenu__email\">{email}</p>\r\n//     <button className=\"userMenu__button\" type=\"button\" onClick={onLogout}>\r\n//       Logout\r\n//     </button>\r\n//   </div>\r\n// );\r\n\r\n// const mapStateToProps = state => ({\r\n//   email: authSelectors.getUsermail(state),\r\n// });\r\n\r\n// const mapDispatchToProps = {\r\n//   onLogout: authOperations.logOut,\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from '../routes';\r\n\r\nimport './AuthNav.css';\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink\r\n      className=\"authNav__link\"\r\n      activeClassName=\"authNav__activeLink\"\r\n      to={routes.RegisterView}\r\n      exact\r\n    >\r\n      REGISTRATION\r\n    </NavLink>\r\n    <NavLink\r\n      className=\"authNav__link\"\r\n      activeClassName=\"authNav__activeLink\"\r\n      to={routes.LoginView}\r\n      exact\r\n    >\r\n      LOGIN\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;\r\n","import React from 'react';\r\n// import { connect } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Navigation from '../Navigation';\r\nimport UserMenu from '../UserMenu';\r\nimport AuthNav from '../AuthNav';\r\nimport { authSelectors } from '../../redux/auth';\r\n\r\nimport './AppBar.css';\r\n\r\nexport default function AppBar() {\r\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n    <header className=\"appBar__header\">\r\n      <Navigation />\r\n      {isLoggedIn ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n  );\r\n}\r\n\r\n// const AppBar = ({ isAuthenticated }) => (\r\n//   <header className=\"appBar__header\">\r\n//     <Navigation />\r\n//     {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n//   </header>\r\n// );\r\n\r\n// const mapStateToProps = state => ({\r\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n// });\r\n\r\n// export default connect(mapStateToProps)(AppBar);\r\n","import React from 'react';\r\n\r\nimport './Container.css';\r\n\r\nconst Container = ({ children }) => <div className=\"container\">{children}</div>;\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authSelectors } from '../redux/auth';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function PrivateRoute({\r\n  // component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  children,\r\n  ...routeProps\r\n}) {\r\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n    <Route {...routeProps}>\r\n      r{isLoggedIn ? children : <Redirect to={redirectTo} />}\r\n    </Route>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = state => ({\r\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n// });\r\n\r\n// export default connect(mapStateToProps)(PrivateRoute);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authSelectors } from '../redux/auth';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function PublicRoute({\r\n  isAuthenticated,\r\n  redirectTo,\r\n  children,\r\n  ...routeProps\r\n}) {\r\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n    <Route {...routeProps}>\r\n      {isLoggedIn && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        children\r\n      )}\r\n    </Route>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = state => ({\r\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n// });\r\n\r\n// export default connect(mapStateToProps)(PublicRoute);\r\n","import React, { useEffect, Suspense, lazy } from 'react';\r\n// import { connect } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Switch } from 'react-router-dom';\r\nimport AppBar from './components/AppBar/AppBar';\r\nimport Container from './components/Container';\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport PublicRoute from './components/PublicRoute';\r\nimport { authOperations } from './redux/auth';\r\n\r\nimport './App.css';\r\n\r\nconst HomeView = lazy(() => import('./views/HomeView'));\r\nconst RegisterView = lazy(() => import('./views/RegisterView'));\r\nconst LoginView = lazy(() => import('./views/LoginView'));\r\nconst ContactsView = lazy(() => import('./views/ContactsView'));\r\n// const NotFoundView = lazy(() => import('./views/NotFoundView'));\r\n\r\nexport default function App() {\r\n  const dispatch = useDispatch();\r\n  // componentDidMount() {\r\n  //   this.props.onGetCurrentUser();\r\n  // }\r\n\r\n  useEffect(() => {\r\n    dispatch(authOperations.getCurrentUser());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      <AppBar />\r\n\r\n      <Suspense fallback={<p>Loading...</p>}>\r\n        <Switch>\r\n          <PublicRoute exact path=\"/\">\r\n            <HomeView />\r\n          </PublicRoute>\r\n\r\n          <PublicRoute path=\"/register\" restricted redirectTo=\"/contacts\">\r\n            <RegisterView />\r\n          </PublicRoute>\r\n\r\n          <PublicRoute path=\"/login\" restricted redirectTo=\"/contacts\">\r\n            <LoginView />\r\n          </PublicRoute>\r\n\r\n          <PrivateRoute path=\"/contacts\" redirectTo=\"/login\">\r\n            <ContactsView />\r\n          </PrivateRoute>\r\n        </Switch>\r\n      </Suspense>\r\n    </Container>\r\n  );\r\n}\r\n\r\n// const mapDispatchToProps = {\r\n//   onGetCurrentUser: authOperations.getCurrentUser,\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(App);\r\n\r\n// class App extends Component {\r\n//   componentDidMount() {\r\n//     this.props.onGetCurrentUser();\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <Container>\r\n//         <AppBar />\r\n\r\n//         <Suspense fallback={<p>Loading...</p>}>\r\n//           <Switch>\r\n//             <PublicRoute exact path=\"/\" component={HomeView} />\r\n//             <PublicRoute\r\n//               path=\"/register\"\r\n//               restricted\r\n//               component={RegisterView}\r\n//               redirectTo=\"/contacts\"\r\n//             />\r\n//             <PublicRoute\r\n//               path=\"/login\"\r\n//               restricted\r\n//               component={LoginView}\r\n//               redirectTo=\"/contacts\"\r\n//             />\r\n//             <PrivateRoute\r\n//               path=\"/contacts\"\r\n//               component={ContactsView}\r\n//               redirectTo=\"/login\"\r\n//             />\r\n//             {/* <PublicRoute component={NotFoundView} /> */}\r\n//           </Switch>\r\n//         </Suspense>\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//   onGetCurrentUser: authOperations.getCurrentUser,\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport reduxStore from './redux/store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  \r\n  <React.StrictMode>  \r\n    <Provider store={reduxStore.store}>\r\n      <PersistGate loading={null} persistor={reduxStore.persistor}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </PersistGate> \r\n    </Provider>  \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\n const authActions = {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n\r\nexport default authActions","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, {payload}) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_,  {payload} ) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst register = credentials => async dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/signup', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n};\r\n\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\nconst logOut = () => async dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\nconst authOperations = { register, logOut, logIn, getCurrentUser };\r\n\r\nexport default authOperations;\r\n","const getIsAuthenticated = state => state.auth.isAuthenticated\r\n\r\nconst getUsermail = state => state.auth.user.email;\r\n\r\n const authSelectors = {\r\n  getIsAuthenticated,\r\n  getUsermail,\r\n};\r\n\r\nexport default authSelectors;"],"sourceRoot":""}