{"version":3,"sources":["../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js"],"names":["alphabet","require","random","format","module","exports","number","done","loopCounter","str","get","Math","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","push","floor","mask","log","length","LN2","step","id","RegExp","replace","test","contactsOperations","addContact","name","dispatch","a","contact","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","deleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContacts","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","ContactForm","state","nameInputId","shortid","generate","numberInputId","handleInput","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","className","this","htmlFor","type","pattern","title","required","onChange","Component","connect","getLoading","contacts","loading","getFilter","filter","getVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","includes","ContactList","useDispatch","useSelector","onDeleteContact","useCallback","map","onClick","Filter","filterContacts","target","ContactsView","isLoadingContacts","useEffect","previousSeed","shuffled","randomFromSeed","ORIGINAL","setCharacters","_alphabet_","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","splice","shuffle","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","seconds","Date","now"],"mappings":"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","file":"static/js/3.6399bb58.chunk.js","sourcesContent":["'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","import axios from 'axios';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n} from './contacts-actions';\r\n\r\nconst fetchContacts = () =>  async dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n        dispatch(fetchContactsSuccess(data));\r\n    } catch (error) {\r\n        dispatch(fetchContactsError(error.message));\r\n    }\r\n\r\n    // axios\r\n    //     .get('/contacts')\r\n    //     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    //     .catch(error => dispatch(fetchContactsError(error)));\r\n}\r\n\r\nconst addContact = ({ name, number }) => async dispatch => {\r\n    const contact = { name, number };\r\n    \r\n    dispatch(addContactRequest);\r\n\r\n    try {\r\n        const { data } = await axios.post('/contacts', contact);\r\n        dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n        dispatch(addContactError(error.message));\r\n    }\r\n}\r\n\r\nconst deleteContact = contactId => async dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    try {\r\n        await axios.delete(`/contacts/${contactId}`);\r\n        dispatch(deleteContactSuccess(contactId));\r\n    } catch (error) {\r\n        dispatch(deleteContactError(error.message));\r\n    }\r\n}\r\n\r\nconst contactsOperations = { addContact, deleteContact, fetchContacts };\r\n \r\nexport default contactsOperations;","import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations } from '../../redux/contacts';\r\n\r\nimport './ContactsForm.css';\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleInput = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"\" onSubmit={this.handleSubmit}>\r\n        <label className=\"contacts__form-item\" htmlFor={this.nameInputId}>\r\n          Name\r\n          <input\r\n            className=\"contacts__form-text\"\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleInput}\r\n            id={this.nameInputId}\r\n          />\r\n        </label>\r\n\r\n        <label className=\"contacts__form-item\" htmlFor={this.numberInputId}>\r\n          Number\r\n          <input\r\n            className=\"contacts__form-text\"\r\n            type=\"tel\"\r\n            value={this.state.number}\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={this.handleInput}\r\n            id={this.numberInputId}\r\n          />\r\n        </label>\r\n        <button className=\"contacts__form-button\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: ({ name, number }) =>\r\n    dispatch(contactsOperations.addContact({ name, number })),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n","import React, { useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations } from '../../redux/contacts';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\nimport './ContactsList.css';\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getVisibleContacts);\r\n\r\n  const onDeleteContact = useCallback(\r\n    id => dispatch(contactsOperations.deleteContact(id)),\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    <ul className=\"contacts__list\">\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className=\"contacts__list-item\" key={id}>\r\n          <p>\r\n            {name}: {number}\r\n          </p>\r\n          <button\r\n            className=\"contacts__list-button\"\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n// const mapStateToProps = state => ({\r\n//   contacts: getVisibleContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n// const ContactList = ({ contacts, onDeleteContact }) => (\r\n//   <ul className=\"contacts__list\">\r\n//     {contacts.map(({ id, name, number }) => (\r\n//       <li className=\"contacts__list-item\" key={id}>\r\n//         <p>\r\n//           {name}: {number}\r\n//         </p>\r\n//         <button\r\n//           className=\"contacts__list-button\"\r\n//           type=\"button\"\r\n//           onClick={() => onDeleteContact(id)}\r\n//         >\r\n//           Delete\r\n//         </button>\r\n//       </li>\r\n//     ))}\r\n//   </ul>\r\n// );\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.array.isRequired,\r\n//   onDeleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   contacts: getVisibleContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { filterContacts } from '../../redux/contacts';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\n\r\nimport './Filter.css';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(getFilter);\r\n\r\n  const onChange = useCallback(\r\n    e => dispatch(filterContacts(e.target.value)),\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <label className=\"filter\">\r\n        Find contacts by name\r\n        <input className=\"\" type=\"text\" value={value} onChange={onChange} />\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\n// const Filter = ({ value, onChange }) => (\r\n//   <div>\r\n//     <label className=\"filter\">\r\n//       Find contacts by name\r\n//       <input className=\"\" type=\"text\" value={value} onChange={onChange} />\r\n//     </label>\r\n//   </div>\r\n// );\r\n\r\n// Filter.propTypes = {\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   value: getFilter(state),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: e => dispatch(filterContacts(e.target.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport ContactForm from '../components/ContactForm';\r\nimport ContactList from '../components/ContactList';\r\nimport Filter from '../components/Filter';\r\nimport { contactsOperations } from '../redux/contacts';\r\nimport { getLoading } from '../redux/contacts/contacts-selectors';\r\n\r\nimport './ContactsView.css';\r\n\r\nexport default function ContactsView() {\r\n  const dispatch = useDispatch();\r\n  const isLoadingContacts = useSelector(getLoading);\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"contactsView__container\">\r\n      <h1 className=\"contactsView__title\">Phonebook</h1>\r\n      <ContactForm />\r\n      <h2 className=\"contactsView__title\">Contacts</h2>\r\n      <Filter />\r\n      {isLoadingContacts && (\r\n        <h1 className=\"contactsView__loading-title\">Loading...</h1>\r\n      )}\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = state => ({\r\n//   isLoadingContacts: getLoading(state),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n// });\r\n\r\n// class ContactsView extends Component {\r\n//   componentDidMount() {\r\n//     this.props.fetchContacts();\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className=\"contactsView__container\">\r\n//         <h1 className=\"contactsView__title\">Phonebook</h1>\r\n//         <ContactForm onSubmit={this.formSubmitHandler} />\r\n//         <h2 className=\"contactsView__title\">Contacts</h2>\r\n//         <Filter />\r\n//         {this.props.isLoadingContacts && (\r\n//           <h1 className=\"contactsView__loading-title\">Loading...</h1>\r\n//         )}\r\n//         <ContactList />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = state => ({\r\n//   isLoadingContacts: getLoading(state),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\r\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n"],"sourceRoot":""}