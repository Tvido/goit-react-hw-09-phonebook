{"version":3,"sources":["views/RegisterView.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["RegisterView","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","className","onSubmit","event","preventDefault","authOperations","register","autoComplete","type","value","onChange","target","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"mappings":"+OAMe,SAASA,IACtB,IAAMC,EAAWC,cAEjB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAwBA,OACE,gCACE,oBAAIC,UAAU,sBAAd,+BAEA,uBACEA,UAAU,qBACVC,SAhBe,SAAAC,GACnBA,EAAMC,iBAENZ,EAASa,IAAeC,SAAS,CAAEX,OAAME,QAAOE,cAEhDD,EAAS,IACTF,EAAQ,IACRI,EAAY,KAURO,aAAa,MAHf,UAKE,wBAAON,UAAU,4BAAjB,kBAEE,uBACEA,UAAU,4BACVO,KAAK,OACLb,KAAK,OACLc,MAAOd,EACPe,SAtCe,SAAAP,GACvBP,EAAQO,EAAMQ,OAAOF,aAyCjB,wBAAOR,UAAU,4BAAjB,mBAEE,uBACEA,UAAU,4BACVO,KAAK,QACLb,KAAK,QACLc,MAAOZ,EACPa,SA7CgB,SAAAP,GACxBL,EAASK,EAAMQ,OAAOF,aAgDlB,wBAAOR,UAAU,4BAAjB,sBAEE,uBACEA,UAAU,4BACVO,KAAK,WACLb,KAAK,WACLc,MAAOV,EACPW,SApDmB,SAAAP,GAC3BH,EAAYG,EAAMQ,OAAOF,aAuDrB,wBAAQR,UAAU,uBAAuBO,KAAK,SAA9C,8B,8ECzEO,SAASI,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGhB,QAETK,GAAKM,EAAKU,SAAWhB,GAH8CO,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAkB,EAAA,GAA2BnB,EAAKC,IGLjF,WACb,MAAM,IAAImB,UAAU,6IHIgF,K","file":"static/js/5.1f6855fc.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { authOperations } from '../redux/auth';\r\n\r\nimport './RegisterView.css';\r\n\r\nexport default function RegisterView() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleNameChange = event => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  const handleEmailChange = event => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = event => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    dispatch(authOperations.register({ name, email, password }));\r\n\r\n    setEmail('');\r\n    setName('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"registerView__title\">Registration Page</h1>\r\n\r\n      <form\r\n        className=\"registerView__form\"\r\n        onSubmit={handleSubmit}\r\n        autoComplete=\"off\"\r\n      >\r\n        <label className=\"registerView__form__label\">\r\n          Name:\r\n          <input\r\n            className=\"registerView__form__input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={handleNameChange}\r\n          />\r\n        </label>\r\n\r\n        <label className=\"registerView__form__label\">\r\n          Email:\r\n          <input\r\n            className=\"registerView__form__input\"\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleEmailChange}\r\n          />\r\n        </label>\r\n\r\n        <label className=\"registerView__form__label\">\r\n          Password:\r\n          <input\r\n            className=\"registerView__form__input\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n          />\r\n        </label>\r\n\r\n        <button className=\"registerView__button\" type=\"submit\">\r\n          Register\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n// class RegisterView extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     email: '',\r\n//     password: '',\r\n//   };\r\n\r\n//   handleChange = ({ target: { name, value } }) => {\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n\r\n//     this.props.onRegister(this.state);\r\n\r\n//     this.setState({ name: '', email: '', password: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     const { name, email, password } = this.state;\r\n\r\n//     return (\r\n//       <div>\r\n//         <h1 className=\"registerView__title\">Registration Page</h1>\r\n\r\n//         <form\r\n//           className=\"registerView__form\"\r\n//           onSubmit={this.handleSubmit}\r\n//           autoComplete=\"off\"\r\n//         >\r\n//           <label className=\"registerView__form__label\">\r\n//             Name:\r\n//             <input\r\n//               className=\"registerView__form__input\"\r\n//               type=\"text\"\r\n//               name=\"name\"\r\n//               value={name}\r\n//               onChange={this.handleChange}\r\n//             />\r\n//           </label>\r\n\r\n//           <label className=\"registerView__form__label\">\r\n//             Email:\r\n//             <input\r\n//               className=\"registerView__form__input\"\r\n//               type=\"email\"\r\n//               name=\"email\"\r\n//               value={email}\r\n//               onChange={this.handleChange}\r\n//             />\r\n//           </label>\r\n\r\n//           <label className=\"registerView__form__label\">\r\n//             Password:\r\n//             <input\r\n//               className=\"registerView__form__input\"\r\n//               type=\"password\"\r\n//               name=\"password\"\r\n//               value={password}\r\n//               onChange={this.handleChange}\r\n//             />\r\n//           </label>\r\n\r\n//           <button className=\"registerView__button\" type=\"submit\">\r\n//             Register\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//   onRegister: authOperations.register,\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(RegisterView);\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}